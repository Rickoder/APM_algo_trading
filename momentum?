from sklearn.preprocessing import StandardScaler

def calculate_indicators(data, column, rsi_window=14, ma_window=20):
    # Calculate RSI
    delta = data[column].diff()
    gain = delta.where(delta > 0, 0).rolling(window=rsi_window).mean()
    loss = -delta.where(delta < 0, 0).rolling(window=rsi_window).mean()
    rs = gain / loss
    data[f'{column}_RSI'] = 100 - (100 / (1 + rs))
    
    # Calculate Moving Average
    data[f'{column}_MA'] = data[column].rolling(window=ma_window).mean()
    
    return data

def generate_signals(data, column, rsi_high=70, rsi_low=30):
    # Generate buy/sell signals
    data[f'{column}_Signal'] = 0
    data.loc[data[f'{column}_RSI'] > rsi_high, f'{column}_Signal'] = -1
    data.loc[data[f'{column}_RSI'] < rsi_low, f'{column}_Signal'] = 1
    
    # Combine signals with moving averages
    data[f'{column}_Combined_Signal'] = (
        data[f'{column}_Signal'] +
        (data[column] > data[f'{column}_MA']).astype(int) -
        (data[column] < data[f'{column}_MA']).astype(int)
    )
    
    return data

# Machine Learning Preparation
def prepare_ml_data(data, column):
    # Drop rows with NaN values
    data = data.dropna()
    
    # Define features and target
    X = data[[column, f'{column}_RSI', f'{column}_MA']]
    y = data[f'{column}_Combined_Signal'].shift(-1).dropna()  # Shift target for future prediction
    X = X.iloc[:-1]  # Align X with y
    
    # Normalize features
    scaler = StandardScaler()
    X = scaler.fit_transform(X)
    
    # Time-based train-test split
    split_index = int(len(X) * 0.8)
    X_train, X_test = X[:split_index], X[split_index:]
    y_train, y_test = y[:split_index], y[split_index:]
    
    return X_train, X_test, y_train, y_test

# Main Loop for All Stocks
for column in merged_df.columns[1:]:
    merged_df = calculate_indicators(merged_df, column)
    merged_df = generate_signals(merged_df, column)
    
    # Machine Learning
    X_train, X_test, y_train, y_test = prepare_ml_data(merged_df, column)
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    
    print(f"Classification Report for {column}:\n")
    print(classification_report(y_test, y_pred))
